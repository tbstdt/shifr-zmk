#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <300>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <300>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
};

/ {
    combos {
        compatible = "zmk,combos";

        PrtSc {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <8 9>;
            layers = <1 0>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <39 38>;
            layers = <0 1>;
        };

        qwerty {
            bindings = <&to 0>;
            key-positions = <18 19>;
        };

        game {
            bindings = <&to 1>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp P  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G  &kp H  &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMICOLON  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp SLASH  &mo 6  &kp K_APP  &kp TAB  &lt 2 SPACE  &lt 5 ESC  &lt 4 ENTER  &lt 3 BACKSPACE  &kp DELETE  &kp C_VOL_DN  &kp C_VOL_UP
            >;
        };

        GAME {
            bindings = <
&kp ESCAPE  &kp Q  &kp W  &kp E  &kp R  &kp T  &kp Y  &kp U  &kp I  &kp O  &kp TAB  &kp A  &kp S  &kp D  &kp F  &kp G  &kp H  &kp J  &kp K  &kp L  &kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B  &kp N  &kp M  &kp COMMA  &kp PERIOD  &kp LCTRL  &mo 4  &kp LEFT_ALT  &mo 2  &kp SPACE  &kp ENTER  &trans  &trans  &trans  &trans
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SYM {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans  &trans  &trans  &trans  &trans  &trans  &kp MINUS  &kp EQUAL  &kp SQT  &kp GRAVE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp BSLH  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        FUN {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &trans  &trans  &trans  &trans  &trans  &trans  &kp F5  &kp F6  &kp F7  &kp F8  &trans  &trans  &trans  &trans  &trans  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        NAV {
            bindings = <
&kp HOME  &trans  &kp PAGE_UP  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp END  &kp UP  &kp PAGE_DOWN  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SYS {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans  &trans  &trans  &trans  &trans  &kp PAUSE_BREAK  &bt BT_CLR_ALL  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &trans  &trans  &trans  &trans  &trans  &kp INSERT  &kp CAPSLOCK  &trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LG(LESS_THAN))  &kp LS(LG(GREATER_THAN))  &kp K_PLAY_PAUSE  &trans  &kp LEFT_WIN  &kp LA(LC(DELETE))  &trans  &trans  &trans  &trans  &trans  &kp C_BRI_DEC  &kp C_BRI_INC
            >;
        };
    };
};
